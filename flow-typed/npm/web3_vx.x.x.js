// flow-typed signature: 82108796cb92cac5386d6688298c9227
// flow-typed version: <<STUB>>/web3_v0.14.0/flow_v0.68.0

/**
 * This is an autogenerated libdef stub for:
 *
 *   'web3'
 *
 * Fill this stub out by replacing all the `any` types.
 *
 * Once filled out, we encourage you to share your work with the
 * community by sending a pull request to:
 * https://github.com/flowtype/flow-typed
 */

import BigNumber from 'bignumber';

declare module 'web3' {

    declare type numberOrBig = number | BigNumber;
    declare type EthInput = string | numberOrBig;

    declare interface Provider {
        isConnected(): boolean;
        send(payload: Object): Object;
        sendAsync(payload: Object, callback: Object => any): void;
    }

    declare function HttpProvider(host: string): Provider & {
        prepareRequest(async: boolean): Request;
        host: string;
        timeout: number;
        user: string;
        password: string;
        headers: { [key: string]: string };
    }

    declare class IpcProvider {
        constructor(path: string, net: mixed): this;
        responseCallbacks: { [key: string]: Function };
        path: string;
        connection: mixed;
    }

    declare class Iban {
        fromAddress(address: string): Iban;
        fromBban(bban: string): Iban;
        createIndirect(options: Object): Iban;
        isValid(iban: string): boolean;
        isDirect(): boolean;
        isIndirect(): boolean;
        checksum(): string;
        institution(): string;
        client(): string;
        address(): string;
        toString(): string;
    }

    declare type Difficulty = {
        c: Array<number>,
        e: 0,
        s: number,
    };

    declare type Block = {
        difficulty: Difficulty,
        extraData: string,
        gasLimit: number,
        gasUsed: number,
        hash: string,
        logsBloom: string,
        miner: string,
        nonce: string,
        sha3Uncles: string,
        number: number,
        parentHash: string,
        receiptsRoot: string,
        sha3Uncles: string,
        size: number,
        stateRoot: string,
        timestamp: number,
        totalDifficulty: Difficulty,
        transactions: Array<string>,
        transactionsRoot: string,
        uncles: Array<string>,
    };

    declare type Transaction = {
        from: string,
        to: string,
        value: number | string | BigNumber,
        gas: number | string | BigNumber,
        gasPrice: number | string | BigNumber,
        data: string,
        nonce: number
    }

    declare class Eth {
        iban: Iban;
        defaultBlock: mixed;
        defaultAccount: mixed;

        // methods
        getBalance(address: string, defaultBlockNumber: number, callback: (error: ?Error, result: BigNumber) => void): void | BigNumber;
        getStorageAt(i1: mixed, i2: string| number| Object, defaultBlockNumber: number): mixed;
        getCode(): mixed;
        getBlock(number: numberOrBig, callback: (error: ?Error, result: Block) => void): void | Block;
        getUncle(): mixed;
        getCompilers(): mixed;
        getBlockTransactionCount(): mixed;
        getBlockUncleCount(): mixed;
        getTransaction(transactionHash: string): mixed;
        getTransactionFromBlock(): mixed;
        getTransactionReceipt(): mixed;
        getTransactionCount(): mixed;
        call(): mixed;
        estimateGas(): mixed;
        sendRawTransaction(): mixed;
        signTransaction(t: Transaction, cb: (err: ?Error, txHash: string) => void): void | string;
        sendTransaction(): mixed;
        sign(): mixed;
        compileSolidity(): mixed;
        compileLLL(): mixed;
        compileSerpent(): mixed;
        submitWork(): mixed;
        getWork(): mixed;

        // properties
        coinbase: string;
        mining: boolean;
        hashrate: number;
        syncing: boolean;
        gasPrice: BigNumber;
        accounts: Array<string>;
        blockNumber: number;
        protocolVersion: string;
    }

    declare class DB {
        putString(i1: mixed, i2: mixed, i3: mixed): mixed;
        getString(i1: mixed, i2: mixed): mixed;
        putHex(i1: mixed, i2: mixed, i3: mixed): mixed;
        getHex(i1: mixed, i2: mixed): mixed;
    }

    declare class Filter {
        implementation: { [key: string]: Function };
        requestManager: mixed;
        options: Object;
        implementation: mixed;
        filterId: ?string;
        callbacks: Array<Function>;
        getLogsCallbacks: Array<Function>;
        pollFilters: Array<mixed>;
        formatter: mixed;
        watch(callback: Function): this;
        stopWatching(callback?: Function): void | mixed;
        get(callback: Function): this;
    }

    declare class Shh {
        newMessageFilter(options: Object, callback: Function, filterCreationErrorCallback: (e: Error) => void): Filter;
        version(): mixed;
        info(): mixed;
        setMaxMessageSize(maxSize: mixed): mixed;
        setMinPoW(minPoW: mixed): mixed;
        markTrustedPeer(peer: mixed): mixed;
        newKeyPair(): mixed;
        addPrivateKey(privateKey: string): mixed;
        deleteKeyPair(keyPair: mixed): mixed;
        hasKeyPair(keyPair: mixed): mixed;
        getPublicKey(i1: mixed): mixed;
        getPrivateKey(i1: mixed): mixed;
        newSymKey(): mixed;
        addSymKey(symKey: string): mixed;
        generateSymKeyFromPassword(password: string): mixed;
        hasSymKey(symKey: string): mixed;
        getSymKey(i1: mixed): mixed;
        deleteSymKey(symKey: string): mixed;

        post(i1: mixed): mixed;
    }

    declare class Net {
        listening: mixed;
        peerCount: mixed;
    }

    declare class Personal {
        newAccount(i1: mixed): mixed;
        importRawKey(i1: mixed, i2: mixed): mixed;
        sign(i1: mixed, address: string, i3: mixed): mixed;
        ecRecomver(i1: mixed, i2: mixed): mixed;
        unlockAccount(address: string, i2: mixed, i3: mixed): mixed;
        sendTransaction(i1: mixed, i2: mixed): mixed;
        lockAccount(address: string): mixed;

        listAccounts: mixed;
    }

    declare class Swarm {
        blockNetworkRead(i1: mixed): mixed;
        syncEnabled(i1: mixed): mixed;
        swapEnabled(i1: mixed): mixed;
        download(i1: mixed, i2: mixed): mixed;
        upload(i1: mixed, i2: mixed): mixed;
        retrieve(i1: mixed): mixed;
        store(i1: mixed, i2: mixed): mixed;
        get(i1: mixed): mixed;
        put(i1: mixed, i2: mixed): mixed;
        modify(i1: mixed, i2: mixed, i3: mixed, i4: mixed): mixed;

        hive: mixed;
        info: mixed;
    }

    declare class Settings {
        defaultBlock: string;
        defaultAccount?: string;
    }

    declare export default class Web3 {
        constructor(provider: Provider): this;
        eth: Eth;
        db: DB;
        shh: Shh;
        net: Net;
        personal: Personal;
        bzz: Swarm;
        settings: Settings;
        version: {
            api: string
        };
        static providers: {
            HttpProvider: HttpProvider,
            IpcProvider: IpcProvider
        };
    }
}
